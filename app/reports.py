import io
from datetime import datetime, timedelta
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy.orm import selectinload
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment

from models import DispatchOrder, Employee, Vehicle # –∏ –¥—Ä—É–≥–∏–µ –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏
from app.keyboards import get_cancel_keyboard # –∏–ª–∏ —Å–≤–æ—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
from app.dispatcher import STATUS_TRANSLATIONS
import logging
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—ã–µ–∑–¥–∞–º
class DispatchReportStates(StatesGroup):
    CHOOSING_PERIOD = State()
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∑–∂–µ

async def start_dispatch_report(message: types.Message, state: FSMContext):
    await state.clear()
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ (—Å–µ–≥–æ–¥–Ω—è, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, —Å–≤–æ–π –ø–µ—Ä–∏–æ–¥)
    # –ü–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∏–º –≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
    await message.answer(
        "üóì <b>–û—Ç—á–µ—Ç –ø–æ –≤—ã–µ–∑–¥–∞–º</b> üóì\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì</b>\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2024-31.01.2024).\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '–Ω–µ–¥–µ–ª—è', '–º–µ—Å—è—Ü'.",
        reply_markup=get_cancel_keyboard("cancel_report_generation"), # –°–≤–æ—è –æ—Ç–º–µ–Ω–∞
        parse_mode="HTML"
    )
    await state.set_state(DispatchReportStates.CHOOSING_PERIOD)

async def process_dispatch_report_period(message: types.Message, state: FSMContext, session_factory: async_sessionmaker):
    period_str = message.text.strip().lower()
    date_from = None
    date_to = None
    today = datetime.now()

    try:
        if period_str == "—Å–µ–≥–æ–¥–Ω—è":
            date_from = today.replace(hour=0, minute=0, second=0, microsecond=0)
            date_to = today.replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period_str == "–≤—á–µ—Ä–∞":
            yesterday = today - timedelta(days=1)
            date_from = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
            date_to = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period_str == "–Ω–µ–¥–µ–ª—è": # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ —Å–µ–≥–æ–¥–Ω—è)
            date_from = (today - timedelta(days=today.weekday())).replace(hour=0, minute=0, second=0, microsecond=0)
            date_to = today.replace(hour=23, minute=59, second=59, microsecond=999999)
        elif period_str == "–º–µ—Å—è—Ü": # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            date_from = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            date_to = today.replace(hour=23, minute=59, second=59, microsecond=999999) # –ö–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞, –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç <= date_to
            # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –º–µ—Å—è—Ü:
            # next_month = today.replace(day=28) + timedelta(days=4)  # —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            # date_to = (next_month - timedelta(days=next_month.day)).replace(hour=23, minute=59, second=59, microsecond=999999)

        else:
            parts = period_str.split('-')
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")
            date_from_str, date_to_str = parts[0].strip(), parts[1].strip()
            date_from = datetime.strptime(date_from_str, "%d.%m.%Y").replace(hour=0, minute=0, second=0, microsecond=0)
            date_to = datetime.strptime(date_to_str, "%d.%m.%Y").replace(hour=23, minute=59, second=59, microsecond=999999)
        
        if date_from > date_to:
            raise ValueError("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=get_cancel_keyboard("cancel_report_generation"))
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ –≤—ã–µ–∑–¥–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    excel_file_bytes = await generate_dispatches_excel_report(session_factory, date_from, date_to)

    if excel_file_bytes:
        report_filename = f"–û—Ç—á–µ—Ç_–ø–æ_–≤—ã–µ–∑–¥–∞–º_{date_from.strftime('%Y%m%d')}-{date_to.strftime('%Y%m%d')}.xlsx"
        input_file = types.BufferedInputFile(excel_file_bytes, filename=report_filename)
        await message.answer_document(input_file, caption=f"‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –ø–æ –≤—ã–µ–∑–¥–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ –≥–æ—Ç–æ–≤.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∏–ª–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    
    await state.clear()
    
async def generate_dispatches_excel_report(session_factory: async_sessionmaker, date_from: datetime, date_to: datetime) -> bytes | None:
    async with session_factory() as session:
        dispatches = await session.scalars(
            select(DispatchOrder)
            .options( # –ñ–∞–¥–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª-–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                selectinload(DispatchOrder.creator),
                selectinload(DispatchOrder.approver)
            )
            .where(
                and_( # type: ignore
                    DispatchOrder.creation_time >= date_from,
                    DispatchOrder.creation_time <= date_to
                )
            )
            .order_by(DispatchOrder.creation_time.asc())
        )
        dispatches_list = dispatches.all()

        if not dispatches_list:
            return None

        wb = Workbook()
        ws = wb.active
        ws.title = "–°–ø–∏—Å–æ–∫ –≤—ã–µ–∑–¥–æ–≤"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            "ID –≤—ã–µ–∑–¥–∞", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", "–ê–¥—Ä–µ—Å", "–ü—Ä–∏—á–∏–Ω–∞", 
            "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ù–ö", "–§–ò–û –ù–ö", "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", 
            "–ö–æ–ª-–≤–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö", "–ö–æ–ª-–≤–æ –ø–æ–≥–∏–±—à–∏—Ö", 
            "–î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–º/–ø–æ–≥–∏–±—à–∏–º", "–û–±—â–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è", "–î–∏—Å–ø–µ—Ç—á–µ—Ä (—Å–æ–∑–¥–∞–ª)"
        ]
        ws.append(headers)
        for col_num, header_title in enumerate(headers, 1): # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            cell = ws.cell(row=1, column=col_num)
            cell.font = Font(bold=True)
            cell.alignment = Alignment(horizontal="center", vertical="center")

        # –î–∞–Ω–Ω—ã–µ
        for order in dispatches_list:
            row_data = [
                order.id,
                order.creation_time.strftime("%d.%m.%Y") if order.creation_time else "",
                order.creation_time.strftime("%H:%M:%S") if order.creation_time else "",
                order.address,
                order.reason,
                STATUS_TRANSLATIONS.get(order.status, order.status),
                order.approval_time.strftime("%d.%m.%Y %H:%M") if order.approval_time else "",
                order.approver.full_name if order.approver else "",
                order.completion_time.strftime("%d.%m.%Y %H:%M") if order.completion_time else "",
                order.victims_count if order.victims_count is not None else 0,
                order.fatalities_count if order.fatalities_count is not None else 0,
                order.details_on_casualties,
                order.notes,
                order.creator.full_name if order.creator else ""
            ]
            ws.append(row_data)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π)
        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[column].width = adjusted_width

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
        file_stream = io.BytesIO()
        wb.save(file_stream)
        file_stream.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞
        return file_stream.getvalue()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
def register_reports_handlers(router: Router):
    logging.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤...")
    router.message.register(start_dispatch_report, F.text == "üìä –û—Ç—á–µ—Ç –ø–æ –≤—ã–µ–∑–¥–∞–º") # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    
    async def process_dispatch_report_period_entry_point(message: types.Message, state: FSMContext):
        from models import async_session as default_session_factory # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        await process_dispatch_report_period(message, state, default_session_factory)
    router.message.register(process_dispatch_report_period_entry_point, DispatchReportStates.CHOOSING_PERIOD)

    # –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    async def cancel_report_generation_handler(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
        await state.clear()
    router.callback_query.register(cancel_report_generation_handler, F.data == "cancel_report_generation", StateFilter(DispatchReportStates))

    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")