from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram import types
from sqlalchemy import select
from models import async_session, ShiftLog
from app.keyboards import (
    get_dispatcher_menu,
    get_commander_menu
)
import logging
async def get_driver_menu_dynamic(employee_id: int):
    is_on_shift = await get_active_shift_for_menu(employee_id) is not None
    shift_button_text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–∞—Ä–∞—É–ª" if is_on_shift else "–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –∫–∞—Ä–∞—É–ª"
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=shift_button_text)], # <--- –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ö–ù–û–ü–ö–ê
            [KeyboardButton(text="–ù–æ–≤—ã–π –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç")],
            [KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫"), KeyboardButton(text="‚õΩ –£—á–µ—Ç –ì–°–ú")],
            [KeyboardButton(text="üõ† –¢–µ—Ö. —Å–æ—Å—Ç–æ—è–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )

async def get_firefighter_menu_dynamic(employee_id: int): # –£–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç employee_id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ get_active_shift_for_menu —É–∂–µ –µ—Å—Ç—å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Å—Ç—É–ø–∏—Ç—å/–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–∞—Ä–∞—É–ª"
    is_on_shift = await get_active_shift_for_menu(employee_id) is not None 
    shift_button_text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–∞—Ä–∞—É–ª" if is_on_shift else "–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –∫–∞—Ä–∞—É–ª"
    
    keyboard_buttons = [
        [KeyboardButton(text=shift_button_text)],
        [KeyboardButton(text="üî• –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥–∞")],
        [KeyboardButton(text="üßØ –ñ—É—Ä–Ω–∞–ª —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è")],
        [KeyboardButton(text="üö® –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥—É")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)

async def get_dispatcher_menu_dynamic(employee_id: int): # –ï—Å–ª–∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É —Ç–µ–±—è –≤ keyboards.py, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π —Ç–∞–º
    is_on_shift = await get_active_shift_for_menu(employee_id) is not None
    shift_button_text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–∞—Ä–∞—É–ª" if is_on_shift else "–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –∫–∞—Ä–∞—É–ª"
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=shift_button_text)],
            [KeyboardButton(text="üî• –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤—ã–µ–∑–¥")],
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥—ã"), KeyboardButton(text="üìÇ –ê—Ä—Ö–∏–≤ –≤—ã–µ–∑–¥–æ–≤")],
            [KeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö")],
            [KeyboardButton(text="üìä –û—Ç—á–µ—Ç –ø–æ –≤—ã–µ–∑–¥–∞–º")],
        ],
        resize_keyboard=True
    )
    
async def get_commander_menu_dynamic(employee_id: int): # –ï—Å–ª–∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É —Ç–µ–±—è –≤ keyboards.py, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π —Ç–∞–º
    is_on_shift = await get_active_shift_for_menu(employee_id) is not None
    shift_button_text = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–∞—Ä–∞—É–ª" if is_on_shift else "–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –∫–∞—Ä–∞—É–ª"
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=shift_button_text)],
            [KeyboardButton(text="‚è≥ –í—ã–µ–∑–¥—ã –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")],
            [KeyboardButton(text="üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥—ã (–≤—Å–µ)")],
            [KeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω–∏–∫–∏/–õ–°")],
            [KeyboardButton(text="üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è")]
        ],
        resize_keyboard=True
    )

async def show_role_specific_menu(message: types.Message, employee_id: int, position: str): # –ü—Ä–∏–Ω–∏–º–∞–µ–º employee_id
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä–∞—É–ª–∞."""
    position_lower = position.lower()
    reply_markup = ReplyKeyboardRemove() # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    if "–≤–æ–¥–∏—Ç–µ–ª—å" in position_lower:
        reply_markup = await get_driver_menu_dynamic(employee_id)
        await message.answer("üöõ –ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=reply_markup)
    elif "–ø–æ–∂–∞—Ä–Ω—ã–π" in position_lower:
        reply_markup = await get_firefighter_menu_dynamic(employee_id)
        await message.answer("üßë‚Äçüöí –ú–µ–Ω—é –ø–æ–∂–∞—Ä–Ω–æ–≥–æ:", reply_markup=reply_markup)
    elif "–¥–∏—Å–ø–µ—Ç—á–µ—Ä" in position_lower:
        reply_markup = await get_dispatcher_menu_dynamic(employee_id) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
        await message.answer("üì° –ú–µ–Ω—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:", reply_markup=reply_markup)
    elif "–Ω–∞—á–∞–ª—å–Ω–∏–∫ –∫–∞—Ä–∞—É–ª–∞" in position_lower:
        reply_markup = await get_commander_menu_dynamic(employee_id) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
        await message.answer("üë®‚Äç‚úàÔ∏è –ú–µ–Ω—é –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –∫–∞—Ä–∞—É–ª–∞:", reply_markup=reply_markup)
    else:
        await message.answer(f"üë®‚Äçüíº –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–æ–ª–∏ '{position}':", reply_markup=reply_markup)
        
async def get_active_shift_for_menu(employee_id: int) -> ShiftLog | None:
    async with async_session() as session: # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–¥–µ—Å—å
        stmt = select(ShiftLog).where(
            ShiftLog.employee_id == employee_id,
            ShiftLog.status == 'active'
        )
        active_shift = await session.scalar(stmt)
        logging.info(f"get_active_shift_for_menu (menu.py) for employee {employee_id}: Found active shift: {bool(active_shift)}, Shift ID: {active_shift.id if active_shift else None}")
        return active_shift
    
