import json
from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, or_
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy.orm import selectinload
from models import async_session, Employee, Equipment, EquipmentLog, DispatchOrder, Vehicle
from app.keyboards import (
    get_equipment_log_main_keyboard,
    get_equipment_log_action_keyboard,
    get_equipment_selection_keyboard,
    get_readiness_toggle_keyboard
)
from app.shift_management import get_active_shift
from app.dispatcher import ACTIVE_DISPATCH_STATUSES, STATUS_TRANSLATIONS

import logging
from aiogram.filters import StateFilter
# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è ---
class EquipmentLogStates(StatesGroup):
    CHOOSING_LOG_MAIN_ACTION = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" / "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
    CHOOSING_LOG_ACTION = State()      # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (–í–∑—è—Ç—å/–í–µ—Ä–Ω—É—Ç—å...)
    SELECTING_EQUIPMENT = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    # WAITING_FOR_NOTES = State() # –î–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–∏–º–µ—á–∞–Ω–∏–π

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def handle_equipment_log_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üßØ –ñ—É—Ä–Ω–∞–ª —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è'."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await message.answer(
        "–ñ—É—Ä–Ω–∞–ª —É—á–µ—Ç–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è:",
        reply_markup=get_equipment_log_main_keyboard()
    )
    await state.set_state(EquipmentLogStates.CHOOSING_LOG_MAIN_ACTION)

async def handle_log_main_action(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∂—É—Ä–Ω–∞–ª–∞ ('–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å'/'–ù–∞–∑–∞–¥')."""
    await callback.answer()
    if callback.data == "log_new_entry":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_equipment_log_action_keyboard()
        )
        # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
        await state.set_state(EquipmentLogStates.CHOOSING_LOG_ACTION)
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()} –¥–ª—è user {callback.from_user.id} (–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è)")
        # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
    elif callback.data == "log_back_to_main":
        await callback.message.delete()
        await state.clear()

async def process_equipment_log_action(callback: types.CallbackQuery, state: FSMContext, session_factory: async_sessionmaker):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è (–í–∑—è—Ç—å/–í–µ—Ä–Ω—É—Ç—å...). –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ."""
    await callback.answer()
    action = callback.data.split('_')[-1] 
    await state.update_data(log_action=action)
    user_id = callback.from_user.id

    async with session_factory() as session: # <--- –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ session_factory
        try:
            employee = await session.scalar( # –ò—Å–ø–æ–ª—å–∑—É–µ–º scalar –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                select(Employee).where(Employee.telegram_id == user_id)
            )
            if not employee:
                await callback.message.edit_text("–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return

            # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è ---
            stmt = select(Equipment)
            if action == 'taken':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                stmt = stmt.where(Equipment.status == 'available')
                action_description = "–≤–∑—è—Ç—å"
            elif action == 'returned':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —á–∏—Å–ª–∏—Ç—Å—è –∑–∞ —ç—Ç–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
                stmt = stmt.where(Equipment.status == 'in_use', Equipment.current_holder_id == employee.id)
                action_description = "–≤–µ—Ä–Ω—É—Ç—å"
            elif action == 'checked':
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Å–ø–∏—Å–∞–Ω–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä)
                stmt = stmt.where(Equipment.status != 'decommissioned')
                action_description = "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
            else:
                # –ù–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π - –ø–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                stmt = stmt.where(Equipment.status == 'available')
                action_description = action # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

            stmt = stmt.order_by(Equipment.name)
            result = await session.execute(stmt)
            equipment_list = result.scalars().all()

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç (–ø–æ–∫–∞–∂–µ—Ç "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ...")
            keyboard = get_equipment_selection_keyboard(equipment_list, action)

            if not equipment_list:
                 # –°–æ–æ–±—â–∞–µ–º, –ø–æ—á–µ–º—É —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
                 if action == 'taken':
                     msg = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è."
                 elif action == 'returned':
                     msg = "–ù–µ—Ç —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, —á–∏—Å–ª—è—â–µ–≥–æ—Å—è –∑–∞ –≤–∞–º–∏, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å."
                 else:
                     msg = "–ù–µ—Ç —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
                 await callback.message.edit_text(msg, reply_markup=keyboard) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                 await state.set_state(EquipmentLogStates.SELECTING_EQUIPMENT) # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
                 logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()} –¥–ª—è user {callback.from_user.id} (—Å–ø–∏—Å–æ–∫ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –ø—É—Å—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã)")
                 return

            await callback.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ {action_description}:",
                reply_markup=keyboard
            )
            await state.set_state(EquipmentLogStates.SELECTING_EQUIPMENT)
            logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()} –¥–ª—è user {callback.from_user.id} (–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è)")

        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è {action}: {e}")
            await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è.")
            await state.clear()

async def process_equipment_selection(callback: types.CallbackQuery, state: FSMContext, session_factory: async_sessionmaker):
    await callback.answer()
    log_message_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
    try:
        # ... (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ action, equipment_id –∏ —Ç.–¥. –∏–∑ callback.data) ...
        parts = callback.data.split('_')
        action = parts[-2]
        equipment_id = int(parts[-1])
        user_telegram_id = callback.from_user.id
        fsm_data = await state.get_data()
        stored_action = fsm_data.get('log_action')

        if action != stored_action: # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ...
            await state.clear(); return

        active_shift_id_for_log = None
        employee_db_id_for_shift_check = None # –ù—É–∂–µ–Ω ID –¥–ª—è get_active_shift –î–û –æ—Å–Ω–æ–≤–Ω–æ–≥–æ begin()

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º employee_db_id, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–∑–≤–∞—Ç—å get_active_shift
        async with session_factory() as temp_session:
            employee_check = await temp_session.scalar(
                select(Employee.id).where(Employee.telegram_id == user_telegram_id)
            )
            if not employee_check:
                log_message_text = "–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)."
                await callback.message.edit_text(log_message_text, reply_markup=None)
                await state.clear()
                return
            employee_db_id_for_shift_check = employee_check

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞—Ä–∞—É–ª, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ç–¥–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É get_active_shift
        current_active_shift = await get_active_shift(session_factory, employee_db_id_for_shift_check)
        if current_active_shift:
            active_shift_id_for_log = current_active_shift.id
            logging.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_db_id_for_shift_check} –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º –∫–∞—Ä–∞—É–ª–µ ID: {active_shift_id_for_log}.")
        else:
            logging.info(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_db_id_for_shift_check} –Ω–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º –∫–∞—Ä–∞—É–ª–µ.")


        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ session –∏ session.begin
        async with session_factory() as session:
            logging.info(f"SRV_DEBUG: process_equipment_selection: Main session CREATED. Is active? {session.in_transaction()}")
            
            # "–•–∞–∫" –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –Ω–æ –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ–æ—Ä–∏—è –≤–µ—Ä–Ω–∞
            if session.in_transaction():
                logging.warning(f"SRV_DEBUG: process_equipment_selection (main block): Transaction was unexpectedly active. Attempting to commit.")
                try:
                    await session.commit()
                    logging.info(f"SRV_DEBUG: process_equipment_selection (main block): Pre-existing transaction committed. Is now active? {session.in_transaction()}")
                except Exception as e_commit_main:
                    logging.error(f"SRV_DEBUG: process_equipment_selection (main block): Failed to commit pre-existing transaction: {e_commit_main}")
                    await session.rollback()
            
            logging.info(f"SRV_DEBUG: process_equipment_selection: BEFORE main session.begin() - Is transaction active? {session.in_transaction()}")
            async with session.begin(): # –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                # 1. –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ô –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –í–ù–£–¢–†–ò —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                employee = await session.scalar(
                    select(Employee).where(Employee.telegram_id == user_telegram_id)
                )
                if not employee: # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è —É–∂–µ –¥–µ–ª–∞–ª–∏
                    log_message_text = "–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
                    raise ValueError(log_message_text) # –û—Ç–∫–∞—Ç–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                
                employee_db_id = employee.id # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç ID –¥–ª—è EquipmentLog

                # 2. –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º
                equipment = await session.get(Equipment, equipment_id)
                if not equipment:
                    log_message_text = "–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                    raise ValueError(log_message_text)

                action_successful = False
                if action == 'taken':
                    # ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è 'taken')
                    if equipment.status == 'available':
                        equipment.status = 'in_use'; equipment.current_holder_id = employee_db_id
                        session.add(equipment); action_successful = True
                        log_message_text = f"‚úÖ –í—ã –≤–∑—è–ª–∏: {equipment.name}"
                    else: log_message_text = f"‚ùå –û—à–∏–±–∫–∞: –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ '{equipment.name}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è."
                elif action == 'returned':
                    # ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è 'returned')
                    if equipment.status == 'in_use' and equipment.current_holder_id == employee_db_id:
                        equipment.status = 'available'; equipment.current_holder_id = None
                        session.add(equipment); action_successful = True
                        log_message_text = f"‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏: {equipment.name}"
                    elif equipment.current_holder_id != employee_db_id: log_message_text = f"‚ùå –û—à–∏–±–∫–∞: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å '{equipment.name}'..."
                    else: log_message_text = f"‚ùå –û—à–∏–±–∫–∞: –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ '{equipment.name}' –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ."
                elif action == 'checked':
                    # ... (–ª–æ–≥–∏–∫–∞ –¥–ª—è 'checked')
                    action_successful = True; log_message_text = f"‚úÖ –í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏: {equipment.name}"

                if action_successful:
                    notes_for_log = f"–î–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∂—É—Ä–Ω–∞–ª."
                    if active_shift_id_for_log: notes_for_log += f" –ö–∞—Ä–∞—É–ª ID: {active_shift_id_for_log}"
                    else: notes_for_log += " –í–Ω–µ –∫–∞—Ä–∞—É–ª–∞"
                    
                    new_log_entry = EquipmentLog(
                        employee_id=employee_db_id, equipment_id=equipment_id, action=action,
                        notes=notes_for_log, shift_log_id=active_shift_id_for_log
                    )
                    session.add(new_log_entry)
                    logging.info(f"–õ–æ–≥ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è: ... shift_id={active_shift_id_for_log}")
                else:
                    logging.warning(f"–î–µ–π—Å—Ç–≤–∏–µ —Å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ–º –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (action_successful=False)... –ü—Ä–∏—á–∏–Ω–∞: {log_message_text}")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await callback.message.edit_text(log_message_text, reply_markup=None)

    # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ ValueError, Exception, finally state.clear()) ...
    except ValueError as ve:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ process_equipment_selection: {ve}, callback_data: '{callback.data}'")
        if log_message_text == "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.": log_message_text = str(ve) if str(ve) else "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."
        try: await callback.message.edit_text(log_message_text, reply_markup=None)
        except Exception: await callback.message.answer(log_message_text, reply_markup=None)
    except Exception as e:
        logging.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è: {e}")
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª. –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞.", reply_markup=None)
    finally:
        await state.clear()
        
async def handle_log_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ FSM –∂—É—Ä–Ω–∞–ª–∞."""
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", show_alert=False) # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å show_alert
    current_state_str = await state.get_state() # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    logging.info(f"–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∂—É—Ä–Ω–∞–ª–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è —Å –∂—É—Ä–Ω–∞–ª–æ–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ), –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∂—É—Ä–Ω–∞–ª–∞: {e}")

    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def handle_readiness_check(message: types.Message, state: FSMContext, session_factory: async_sessionmaker): # <--- –î–û–ë–ê–í–õ–ï–ù session_factory
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üö® –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥—É'. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã."""
    await state.clear() # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FSM –¥–ª—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π
    user_id = message.from_user.id

    async with session_factory() as session: # <--- –°–û–ó–î–ê–ï–ú –°–ï–°–°–ò–Æ –ò–ó SESSION_FACTORY
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º session.scalar, —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º –æ–¥–∏–Ω –∏–ª–∏ –Ω–æ–ª—å –æ–±—ä–µ–∫—Ç–æ–≤ Employee
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_id == user_id)
        )

        if not employee:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return

        status_text = "‚úÖ –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ì–û–¢–û–í–´ –∫ –≤—ã–µ–∑–¥—É." if employee.is_ready else "‚ùå –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ù–ï –ì–û–¢–û–í–´ –∫ –≤—ã–µ–∑–¥—É."
        keyboard = get_readiness_toggle_keyboard(employee.is_ready)

        await message.answer(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:\n{status_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

# --- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ ---
async def handle_set_readiness(callback: types.CallbackQuery, session_factory: async_sessionmaker):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏."""
    await callback.answer()
    user_id = callback.from_user.id
    set_ready_to = None

    if callback.data == "set_ready_true":
        set_ready_to = True
    elif callback.data == "set_ready_false":
        set_ready_to = False
    elif callback.data == "readiness_back":
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
        return

    if set_ready_to is None:
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data –≤ handle_set_readiness: {callback.data}")
        return

    try:
        async with session_factory() as session: # <--- –°–û–ó–î–ê–ï–ú –°–ï–°–°–ò–Æ –ò–ó SESSION_FACTORY
            async with session.begin(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º session.scalar, —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ–º –æ–¥–∏–Ω –∏–ª–∏ –Ω–æ–ª—å –æ–±—ä–µ–∫—Ç–æ–≤ Employee
                employee = await session.scalar(
                    select(Employee).where(Employee.telegram_id == user_id)
                )

                if not employee:
                    await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
                    return

                if employee.is_ready == set_ready_to:
                    status_text = "‚úÖ –í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ì–û–¢–û–í–´." if set_ready_to else "‚ùå –í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ù–ï –ì–û–¢–û–í–´."
                    await callback.message.edit_text(f"{status_text} –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω.", reply_markup=None)
                    return

                employee.is_ready = set_ready_to
                session.add(employee)
                # –ö–æ–º–º–∏—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ session.begin()
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
            new_status_text = "‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ì–û–¢–û–í–´." if set_ready_to else "‚ùå –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: –í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ù–ï –ì–û–¢–û–í–´."
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–∞ {set_ready_to}")
            await callback.message.edit_text(new_status_text, reply_markup=None)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {user_id}: {e}")
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.")

async def handle_shift_schedule_view(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω'. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å–º–µ–Ω—É."""
    user_id = message.from_user.id
    async with async_session() as session:
        shift = await session.scalar(
            select(Employee.shift).where(Employee.telegram_id == user_id)
        )

        if shift is not None:
            await message.answer(
                f"–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞: <b>{shift}</b>.\n\n" # –í—ã–¥–µ–ª–∏–º –∂–∏—Ä–Ω—ã–º
                f"<i>–î–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.</i>", # –£—Ç–æ—á–Ω–µ–Ω–∏–µ
                parse_mode='HTML' # <--- –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º–µ–Ω–µ.")

async def show_my_active_dispatches(
    event: types.Message | types.CallbackQuery,
    session_factory: async_sessionmaker,
    target_dispatch_id: int | None = None
):
    user_telegram_id = event.from_user.id
    
    if isinstance(event, types.Message):
        logging.info(f"–ü–æ–∂–∞—Ä–Ω—ã–π {user_telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥–∞ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é).")
        reply_target_message = event
    elif isinstance(event, types.CallbackQuery):
        logging.info(f"–ü–æ–∂–∞—Ä–Ω—ã–π {user_telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –≤—ã–µ–∑–¥–∞ ID {target_dispatch_id} (—á–µ—Ä–µ–∑ callback).")
        await event.answer()
        reply_target_message = event.message
    else:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –≤ show_my_active_dispatches: {type(event)}")
        return

    active_dispatches_to_show = []

    async with session_factory() as session:
        employee = await session.scalar(
            select(Employee).where(Employee.telegram_id == user_telegram_id)
        )
        if not employee:
            await reply_target_message.answer("–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        employee_id = employee.id

        statuses_for_firefighter = ['approved', 'dispatched', 'in_progress']
        
        query = select(DispatchOrder).where(DispatchOrder.status.in_(statuses_for_firefighter))
        if target_dispatch_id is not None:
            query = query.where(DispatchOrder.id == target_dispatch_id)
        
        relevant_dispatches_result = await session.scalars(query.order_by(DispatchOrder.creation_time.desc()))
        
        for dispatch in relevant_dispatches_result.all():
            assigned_ids_list = []
            if dispatch.assigned_personnel_ids:
                try:
                    if isinstance(dispatch.assigned_personnel_ids, str):
                        assigned_ids_list = json.loads(dispatch.assigned_personnel_ids)
                    elif isinstance(dispatch.assigned_personnel_ids, list):
                        assigned_ids_list = dispatch.assigned_personnel_ids 
                    else:
                        logging.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è assigned_personnel_ids: {type(dispatch.assigned_personnel_ids)} –¥–ª—è –≤—ã–µ–∑–¥–∞ {dispatch.id}")
                    
                    if isinstance(assigned_ids_list, list) and employee_id in assigned_ids_list:
                        active_dispatches_to_show.append(dispatch)
                except json.JSONDecodeError:
                    logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è assigned_personnel_ids –¥–ª—è –≤—ã–µ–∑–¥–∞ {dispatch.id} –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {dispatch.assigned_personnel_ids}")
        
        if not active_dispatches_to_show:
            msg_text = f"–í—ã–µ–∑–¥ ‚Ññ{target_dispatch_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π, –ª–∏–±–æ –æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω." if target_dispatch_id else "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–µ–∑–¥–æ–≤."
            if isinstance(event, types.CallbackQuery):
                try: await event.message.edit_text(msg_text, reply_markup=None)
                except Exception: await reply_target_message.answer(msg_text)
            else:
                await reply_target_message.answer(msg_text)
            return

        response_parts = []
        if isinstance(event, types.Message) and not target_dispatch_id:
             response_parts.append("<b>‚ÑπÔ∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥–∞:</b>")

        for dispatch_order_obj in active_dispatches_to_show:
            dispatch_details = [
                f"\n<b>–í—ã–µ–∑–¥ ‚Ññ {dispatch_order_obj.id}</b> (–°—Ç–∞—Ç—É—Å: {STATUS_TRANSLATIONS.get(dispatch_order_obj.status, dispatch_order_obj.status)})",
                f"<b>–ê–¥—Ä–µ—Å:</b> {dispatch_order_obj.address}",
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {dispatch_order_obj.reason}",
                f"<b>–°–æ–∑–¥–∞–Ω:</b> {dispatch_order_obj.creation_time.strftime('%d.%m.%Y %H:%M')}"
            ]
            if dispatch_order_obj.approval_time:
                dispatch_details.append(f"<b>–£—Ç–≤–µ—Ä–∂–¥–µ–Ω:</b> {dispatch_order_obj.approval_time.strftime('%d.%m.%Y %H:%M')}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –õ–°
            if dispatch_order_obj.assigned_personnel_ids:
                try:
                    personnel_ids_data = dispatch_order_obj.assigned_personnel_ids
                    personnel_ids_list = []
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨
                    if isinstance(personnel_ids_data, str):
                        personnel_ids_list = json.loads(personnel_ids_data)
                    elif isinstance(personnel_ids_data, list):
                        personnel_ids_list = personnel_ids_data
                    
                    if personnel_ids_list:
                        personnel_on_dispatch_result = await session.execute(
                            select(Employee.full_name, Employee.position, Employee.rank)
                            .where(Employee.id.in_(personnel_ids_list))
                            .order_by(Employee.full_name)
                        )
                        personnel_str_list = ", ".join([f"{name} ({pos}, {rank or '–±/–∑'})" for name, pos, rank in personnel_on_dispatch_result.all()])
                        dispatch_details.append(f"<b>–õ–° –Ω–∞ –≤—ã–µ–∑–¥–µ:</b> {personnel_str_list if personnel_str_list else '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
                    else:
                        dispatch_details.append("<b>–õ–° –Ω–∞ –≤—ã–µ–∑–¥–µ:</b> –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
                except json.JSONDecodeError:
                    dispatch_details.append("<b>–õ–° –Ω–∞ –≤—ã–µ–∑–¥–µ:</b> –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (JSON)")
            else:
                dispatch_details.append("<b>–õ–° –Ω–∞ –≤—ã–µ–∑–¥–µ:</b> –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ
            if dispatch_order_obj.assigned_vehicle_ids:
                try:
                    vehicle_ids_data = dispatch_order_obj.assigned_vehicle_ids
                    vehicle_ids_list = []
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨
                    if isinstance(vehicle_ids_data, str):
                        vehicle_ids_list = json.loads(vehicle_ids_data)
                    elif isinstance(vehicle_ids_data, list):
                        vehicle_ids_list = vehicle_ids_data
                        
                    if vehicle_ids_list:
                        vehicles_on_dispatch_result = await session.execute(
                            select(Vehicle.model, Vehicle.number_plate)
                            .where(Vehicle.id.in_(vehicle_ids_list))
                            .order_by(Vehicle.model)
                        )
                        vehicle_str_list = ", ".join([f"{model} ({plate})" for model, plate in vehicles_on_dispatch_result.all()])
                        dispatch_details.append(f"<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {vehicle_str_list if vehicle_str_list else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")
                    else:
                        dispatch_details.append("<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
                except json.JSONDecodeError:
                    dispatch_details.append("<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (JSON)")
            else:
                dispatch_details.append("<b>–¢–µ—Ö–Ω–∏–∫–∞:</b> –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")

            if dispatch_order_obj.victims_count is not None and dispatch_order_obj.victims_count > 0:
                dispatch_details.append(f"<b>–ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö:</b> {dispatch_order_obj.victims_count}")
            if dispatch_order_obj.fatalities_count is not None and dispatch_order_obj.fatalities_count > 0:
                dispatch_details.append(f"<b>–ü–æ–≥–∏–±—à–∏—Ö:</b> {dispatch_order_obj.fatalities_count}")
            if dispatch_order_obj.details_on_casualties:
                 dispatch_details.append(f"<b>–î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–º:</b> {dispatch_order_obj.details_on_casualties}")
            
            response_parts.append("\n".join(dispatch_details))
        
        final_response = "\n\n".join(response_parts) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –≤—ã–µ–∑–¥–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        
        if isinstance(event, types.CallbackQuery) and target_dispatch_id:
            try:
                await event.message.edit_text(final_response, parse_mode="HTML", reply_markup=None)
            except Exception as e_edit:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –≤—ã–µ–∑–¥–∞ ID {target_dispatch_id}: {e_edit}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º.")
                await reply_target_message.answer(final_response, parse_mode="HTML")
        else:
            MAX_MESSAGE_LENGTH = 4096
            if len(final_response) > MAX_MESSAGE_LENGTH:
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∂–∞—Ä–Ω–æ–≥–æ {user_telegram_id} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º.")
                for i in range(0, len(final_response), MAX_MESSAGE_LENGTH):
                    await reply_target_message.answer(final_response[i:i + MAX_MESSAGE_LENGTH], parse_mode="HTML")
            else:
                await reply_target_message.answer(final_response, parse_mode="HTML")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_firefighter_handlers(router: Router):
    logging.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∂–∞—Ä–Ω–æ–≥–æ...")

    # –ö–Ω–æ–ø–∫–∞ "üßØ –ñ—É—Ä–Ω–∞–ª —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è"
    router.message.register(handle_equipment_log_button, F.text == "üßØ –ñ—É—Ä–Ω–∞–ª —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è")

    # –ö–Ω–æ–ø–∫–∞ "üö® –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥—É"
    async def handle_readiness_check_entry_point(message: types.Message, state: FSMContext):
        await handle_readiness_check(message, state, async_session)
    router.message.register(handle_readiness_check_entry_point, F.text == "üö® –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤—ã–µ–∑–¥—É")

    # Callbacks –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    async def handle_set_readiness_entry_point(callback: types.CallbackQuery):
        await handle_set_readiness(callback, async_session)
    router.callback_query.register(handle_set_readiness_entry_point, F.data.in_(['set_ready_true', 'set_ready_false', 'readiness_back']))

    # –ö–Ω–æ–ø–∫–∞ "üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω"
    async def handle_shift_schedule_view_entry_point(message: types.Message):
        await handle_shift_schedule_view(message, async_session)
    router.message.register(handle_shift_schedule_view_entry_point, F.text == "üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω")

    # –ö–Ω–æ–ø–∫–∞ "üî• –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥–∞"
    async def show_my_active_dispatches_menu_entry_point(message: types.Message, state: FSMContext):
        await show_my_active_dispatches(message, async_session)
    router.message.register(show_my_active_dispatches_menu_entry_point, F.text == "üî• –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥–∞")

    # Callback –¥–ª—è "–î–µ—Ç–∞–ª–∏ –≤—ã–µ–∑–¥–∞"
    async def show_dispatch_details_callback_entry_point(callback: types.CallbackQuery, state: FSMContext):
        try: dispatch_id = int(callback.data.split("_")[-1])
        except (IndexError, ValueError): await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True); return
        await show_my_active_dispatches(callback, async_session, target_dispatch_id=dispatch_id)
    router.callback_query.register(show_dispatch_details_callback_entry_point, F.data.startswith("dispatch_view_details_"))

    # FSM –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    router.callback_query.register(handle_log_main_action, EquipmentLogStates.CHOOSING_LOG_MAIN_ACTION, F.data.in_(['log_new_entry', 'log_back_to_main']))
    
    async def process_equipment_log_action_entry_point(callback: types.CallbackQuery, state: FSMContext):
        await process_equipment_log_action(callback, state, async_session)
    router.callback_query.register(process_equipment_log_action_entry_point, EquipmentLogStates.CHOOSING_LOG_ACTION, F.data.startswith("log_action_"))

    async def process_equipment_selection_entry_point(callback: types.CallbackQuery, state: FSMContext):
        await process_equipment_selection(callback, state, async_session)
    router.callback_query.register(process_equipment_selection_entry_point, EquipmentLogStates.SELECTING_EQUIPMENT, F.data.startswith("log_select_"))

    router.callback_query.register(handle_log_cancel, StateFilter(EquipmentLogStates.CHOOSING_LOG_ACTION, EquipmentLogStates.SELECTING_EQUIPMENT), F.data == "log_cancel")
    router.callback_query.register(lambda cb: cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è.", show_alert=True), F.data == "log_no_equipment", EquipmentLogStates.SELECTING_EQUIPMENT)
    
        # --- –õ–û–í–£–®–ö–ê ---
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û–°–õ–ï–î–ù–ò–ú –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
    async def catch_firefighter_callbacks(callback: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        logging.warning(
            f"!!! –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ô FIREFIGHTER Callback: "
            f"Data='{callback.data}', State='{current_state}', "
            f"User='{callback.from_user.id}', MsgID='{callback.message.message_id}'"
        )
        # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –æ—à–∏–±–∫—É
        await callback.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.", show_alert=True)
        # router.callback_query.register(catch_firefighter_callbacks) # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤!
        
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∂–∞—Ä–Ω–æ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")