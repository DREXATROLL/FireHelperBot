from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import async_sessionmaker # <--- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú async_sessionmaker
from models import Employee, is_user_registered_v2 # async_session –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
from app.keyboards import get_position_keyboard, get_rank_keyboard
from app.menu import show_role_specific_menu
from sqlalchemy import select
import logging
from aiogram.types import ReplyKeyboardRemove

class RegistrationStates(StatesGroup):
    WAITING_FOR_NAME = State()
    WAITING_FOR_POSITION = State()
    WAITING_FOR_RANK = State()
    WAITING_FOR_SHIFT_AND_CONTACTS = State()

# --- –ò–ó–ú–ï–ù–Ø–ï–ú –°–ò–ì–ù–ê–¢–£–†–£ –§–£–ù–ö–¶–ò–ò ---
async def start_bot(message: types.Message, state: FSMContext, session_factory: async_sessionmaker):
    await state.clear()
    user_id = message.from_user.id

    # is_user_registered —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å session_factory
    if await is_user_registered_v2(user_id, session_factory): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é is_user_registered_v2
        logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
        async with session_factory() as session: # <--- –°–û–ó–î–ê–ï–ú –°–ï–°–°–ò–Æ –ó–î–ï–°–¨
            employee = await session.execute(
                select(Employee).where(Employee.telegram_id == user_id)
            )
            employee = employee.scalar_one_or_none()
            if employee:
                await show_role_specific_menu(message, employee.id, employee.position)
            else:
                logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω Employee –≤ –ë–î –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ user_id {user_id}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        logging.info(f"–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
        await message.answer(
            "üîê –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(RegistrationStates.WAITING_FOR_NAME)

async def start_registration(message: types.Message, state: FSMContext):
    # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ–π, –µ—Å–ª–∏ /start –≤–µ–¥–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    await state.set_state(RegistrationStates.WAITING_FOR_NAME)

async def process_name(message: types.Message, state: FSMContext):
    name_parts = message.text.split()
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    if len(name_parts) < 2 or len(name_parts) > 4 : # –î–æ–ø—É—Å–∫–∞–µ–º 2-4 —Å–ª–æ–≤–∞
        await message.answer("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2-4 —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    await state.update_data(full_name=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        reply_markup=get_position_keyboard()
    )
    await state.set_state(RegistrationStates.WAITING_FOR_POSITION)

async def process_position(callback: types.CallbackQuery, state: FSMContext):
    position = callback.data.split('_')[1]
    await state.update_data(position=position)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ:",
        reply_markup=get_rank_keyboard()
    )
    await state.set_state(RegistrationStates.WAITING_FOR_RANK)

async def process_rank(callback: types.CallbackQuery, state: FSMContext):
    rank = callback.data.split('_')[1]
    await state.update_data(rank=rank)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–æ –∑–≤–∞–Ω–∏–µ: {rank}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567):" # –£–±—Ä–∞–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–º–µ–Ω—ã
    )
    await state.set_state(RegistrationStates.WAITING_FOR_SHIFT_AND_CONTACTS) # –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–∏—Ç—Å—è

async def process_contacts(message: types.Message, state: FSMContext, session_factory: async_sessionmaker):
    try:
        contacts = message.text.strip()
        if not contacts.startswith('+') or not contacts[1:].isdigit() or len(contacts) < 11:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: +79991234567")

        data = await state.get_data()

        async with session_factory() as session: # <--- –°–û–ó–î–ê–ï–ú –°–ï–°–°–ò–Æ –ó–î–ï–°–¨
            async with session.begin(): # <--- –ù–ê–ß–ò–ù–ê–ï–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ
                employee = Employee(
                    telegram_id=message.from_user.id,
                    full_name=data['full_name'],
                    position=data['position'],
                    rank=data['rank'],
                    contacts=contacts
                )
                session.add(employee)
                # –ö–æ–º–º–∏—Ç –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ session.begin()
            
            # employee.id –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ (–∏–ª–∏ –ø–æ—Å–ª–µ session.flush() –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
            # –î–ª—è show_role_specific_menu –Ω–∞–º –Ω—É–∂–µ–Ω employee.id.
            # –ï—Å–ª–∏ employee.id –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–æ –∫–æ–º–º–∏—Ç–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ë–î –∏ SQLAlchemy),
            # –º–æ–∂–Ω–æ –ª–∏–±–æ —Å–¥–µ–ª–∞—Ç—å flush, –ª–∏–±–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å employee –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞,
            # –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞—Ç—å employee –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –∏–º–µ—Ç—å ID.
            # –ü–æ—Å–ª–µ session.begin() –æ–±—ä–µ–∫—Ç employee –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID.

            logging.info(f"–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {employee.telegram_id} - {employee.full_name}, ID: {employee.id}")
            await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {data['full_name']}!")
            await show_role_specific_menu(message, employee.id, data['position']) # –ò—Å–ø–æ–ª—å–∑—É–µ–º employee.id
            await state.clear()

    except ValueError as ve:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {ve}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567)")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        await message.answer(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def cancel_registration(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()

async def back_to_position(callback: types.CallbackQuery, state: FSMContext):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state == RegistrationStates.WAITING_FOR_RANK:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
            reply_markup=get_position_keyboard()
        )
        await state.set_state(RegistrationStates.WAITING_FOR_POSITION)
    else:
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ back_to_position –∏–∑ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state}")
    await callback.answer()

# –£–±—Ä–∞–ª–∏ process_new_shift_number