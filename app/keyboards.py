from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from aiogram.utils.keyboard import InlineKeyboardBuilder
from models import Equipment, Employee, Vehicle
# --- Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def confirm_cancel_keyboard(show_finish_button=False): # –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è
    keyboard_rows = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ]
    ]
    if show_finish_button:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        keyboard_rows.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="finish_trip")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–µ–∑–¥–∞
def confirm_cancel_dispatch_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–ö", callback_data="dispatch_confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="dispatch_cancel")
            ]
        ]
    )

def get_position_keyboard(): # –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–í–æ–¥–∏—Ç–µ–ª—å", callback_data="position_–í–æ–¥–∏—Ç–µ–ª—å"),
                InlineKeyboardButton(text="–ü–æ–∂–∞—Ä–Ω—ã–π", callback_data="position_–ü–æ–∂–∞—Ä–Ω—ã–π")
            ],
            [
                InlineKeyboardButton(text="–î–∏—Å–ø–µ—Ç—á–µ—Ä", callback_data="position_–î–∏—Å–ø–µ—Ç—á–µ—Ä"),
                InlineKeyboardButton(text="–ù–∞—á–∞–ª—å–Ω–∏–∫ –∫–∞—Ä–∞—É–ª–∞", callback_data="position_–ù–∞—á–∞–ª—å–Ω–∏–∫ –∫–∞—Ä–∞—É–ª–∞")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")
            ]
        ]
    )
    return keyboard

def get_rank_keyboard(): # –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–†—è–¥–æ–≤–æ–π", callback_data="rank_–†—è–¥–æ–≤–æ–π"),
                InlineKeyboardButton(text="–°–µ—Ä–∂–∞–Ω—Ç", callback_data="rank_–°–µ—Ä–∂–∞–Ω—Ç")
            ],
            [
                InlineKeyboardButton(text="–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", callback_data="rank_–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç"),
                InlineKeyboardButton(text="–ö–∞–ø–∏—Ç–∞–Ω", callback_data="rank_–ö–∞–ø–∏—Ç–∞–Ω")
            ],
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_position"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")
            ]
        ]
    )
    return keyboard

def get_equipment_log_main_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∂—É—Ä–Ω–∞–ª–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="log_new_entry")],
            # [InlineKeyboardButton(text="üëÄ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="log_my_entries")], # –ü–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="log_back_to_main")] # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞
        ]
    )
    return keyboard

def get_equipment_log_action_keyboard():
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í–∑—è—Ç—å", callback_data="log_action_taken"),
                InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å", callback_data="log_action_returned")
            ],
            [
                InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="log_action_checked"),
                # InlineKeyboardButton(text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="log_action_issue") # –ü–æ–∫–∞ —É–ø—Ä–æ—Å—Ç–∏–º
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="log_cancel")]
        ]
    )
    return keyboard

def get_equipment_selection_keyboard(equipment_list: list[Equipment], action: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    if equipment_list:
        for item in equipment_list:
            # callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å, action –∏ ID —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
            builder.button(
                text=f"{item.name} ({item.inventory_number or '–±/–Ω'})",
                callback_data=f"log_select_{action}_{item.id}"
            )
        builder.adjust(1) # –ü–æ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤ —Å—Ç—Ä–æ–∫–µ
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω—É
        builder.button(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è", callback_data="log_no_equipment") # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="log_cancel")) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤—Å–µ–≥–¥–∞
    return builder.as_markup()

def get_readiness_toggle_keyboard(is_currently_ready: bool):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏."""
    builder = InlineKeyboardBuilder()
    if is_currently_ready:
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≥–æ—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—å –ù–ï –≥–æ—Ç–æ–≤—ã–º
        builder.button(text="‚ùå –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –ù–ï –≥–æ—Ç–æ–≤—ã–º", callback_data="set_ready_false")
    else:
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ù–ï –≥–æ—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—å –≥–æ—Ç–æ–≤—ã–º
        builder.button(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –ì–û–¢–û–í–´–ú", callback_data="set_ready_true")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="readiness_back"))
    return builder.as_markup()

# –ù–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
def get_dispatcher_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –∫–∞—Ä–∞—É–ª")], # <--- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
            [KeyboardButton(text="üî• –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤—ã–µ–∑–¥")],
            [KeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥—ã"), KeyboardButton(text="üìÇ –ê—Ä—Ö–∏–≤ –≤—ã–µ–∑–¥–æ–≤")],
            [KeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö")], # <--- –î–æ–±–∞–≤–∏–º —Å—Ä–∞–∑—É –∫–Ω–æ–ø–∫—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        ],
        resize_keyboard=True
    )
    
def get_dispatch_approval_keyboard(dispatch_order_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–µ–∑–¥–∞ –ù–ö."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=f"dispatch_approve_{dispatch_order_id}" # callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç ID –≤—ã–µ–∑–¥–∞
    )
    builder.button(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"dispatch_reject_{dispatch_order_id}" # callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç ID –≤—ã–µ–∑–¥–∞
    )
    builder.adjust(2) # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()

# –î–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –ù–ö
def get_commander_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –∫–∞—Ä–∞—É–ª")], # <--- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
            [KeyboardButton(text="‚è≥ –í—ã–µ–∑–¥—ã –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")],
            [KeyboardButton(text="üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–µ–∑–¥—ã (–≤—Å–µ)")],
            [KeyboardButton(text="üìã –°—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω–∏–∫–∏/–õ–°")],
            [KeyboardButton(text="üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è")] # <--- –î–æ–±–∞–≤–∏–º —Å—Ä–∞–∑—É –∫–Ω–æ–ø–∫—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (–°–ò–ó–û–î –≤ —Å—Ç—Ä–æ–π)
        ],
        resize_keyboard=True
    )
    
def get_personnel_select_keyboard(employees: list[Employee], selected_ids: set[int]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    builder = InlineKeyboardBuilder()
    for emp in employees:
        is_selected = emp.id in selected_ids
        # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–∞–ª–æ—á–∫–æ–π
        text = f"{'‚úÖ' if is_selected else '‚¨úÔ∏è'} {emp.full_name} ({emp.rank})"
        # callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
        builder.button(text=text, callback_data=f"dispatch_toggle_personnel_{emp.id}")
    builder.adjust(1) # –ü–æ –æ–¥–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ —Å—Ç—Ä–æ–∫–µ
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Ö–Ω–∏–∫–∏)
    builder.row(InlineKeyboardButton(text="‚û°Ô∏è –ö –≤—ã–±–æ—Ä—É —Ç–µ—Ö–Ω–∏–∫–∏", callback_data="dispatch_personnel_done"))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–µ–∑–¥–∞", callback_data="dispatch_create_cancel"))
    return builder.as_markup()

def get_vehicle_select_keyboard(vehicles: list[Vehicle], selected_ids: set[int]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏."""
    builder = InlineKeyboardBuilder()
    for vhc in vehicles:
        is_selected = vhc.id in selected_ids
        text = f"{'‚úÖ' if is_selected else '‚¨úÔ∏è'} {vhc.model} ({vhc.number_plate})"
        builder.button(text=text, callback_data=f"dispatch_toggle_vehicle_{vhc.id}")
    builder.adjust(1)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é)
    builder.row(InlineKeyboardButton(text="‚û°Ô∏è –ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –≤—ã–µ–∑–¥–∞", callback_data="dispatch_vehicles_done"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–µ–∑–¥–∞", callback_data="dispatch_create_cancel"))
    return builder.as_markup()

def get_cancel_keyboard(callback_data: str = "universal_cancel"): # <-- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π callback_data
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=callback_data))
    return builder.as_markup()

def get_sizod_status_keyboard(callback_prefix: str = "sizod_status_start_"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –°–ò–ó–û–î (–ò—Å–ø—Ä–∞–≤–µ–Ω/–ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω)."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ò—Å–ø—Ä–∞–≤–µ–Ω", callback_data=f"{callback_prefix}–∏—Å–ø—Ä–∞–≤–µ–Ω"),
        InlineKeyboardButton(text="‚ö†Ô∏è –ù–µ–∏—Å–ø—Ä–∞–≤–µ–Ω", callback_data=f"{callback_prefix}–Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω")
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–∑–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä–∞—É–ª)
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="universal_cancel"))
    return builder.as_markup()

def get_vehicle_selection_for_shift_keyboard(vehicles: list[Vehicle]):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–∏ –∑–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–∞ —Å–º–µ–Ω—É."""
    builder = InlineKeyboardBuilder()
    if vehicles:
        for vhc in vehicles:
            builder.button(
                text=f"{vhc.model} ({vhc.number_plate})",
                callback_data=f"start_shift_vehicle_{vhc.id}" # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ FSM
            )
        builder.adjust(1) # –ü–æ –æ–¥–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é –≤ —Å—Ç—Ä–æ–∫–µ
    else:
        builder.button(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π", callback_data="no_vehicles_for_shift")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–∑–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä–∞—É–ª)
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="universal_cancel"))
    return builder.as_markup()

def confirm_cancel_absence_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="absence_confirm"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="absence_edit"), # –î–ª—è –±—É–¥—É—â–µ–≥–æ
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="absence_cancel_final")
            ]
        ]
    )
    
def get_dispatch_edit_field_keyboard(dispatch_id: int):
    builder = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    builder.button(text="–ö–æ–ª-–≤–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö", callback_data=f"edit_dispatch_field_victims_{dispatch_id}")
    builder.button(text="–ö–æ–ª-–≤–æ –ø–æ–≥–∏–±—à–∏—Ö", callback_data=f"edit_dispatch_field_fatalities_{dispatch_id}")
    builder.button(text="–î–µ—Ç–∞–ª–∏ –ø–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–º/–ø–æ–≥–∏–±—à–∏–º", callback_data=f"edit_dispatch_field_casualties_details_{dispatch_id}")
    builder.button(text="–û–±—â–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –≤—ã–µ–∑–¥—É", callback_data=f"edit_dispatch_field_notes_{dispatch_id}")
    builder.adjust(1) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_dispatch_cancel_{dispatch_id}"))
    return builder.as_markup()

def get_confirm_cancel_edit_keyboard(dispatch_id: int): # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ", callback_data=f"edit_dispatch_save_change_{dispatch_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", callback_data=f"edit_dispatch_cancel_change_{dispatch_id}") # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è
    builder.adjust(2)
    return builder.as_markup()

def get_equipment_maintenance_action_keyboard(equipment_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Å—Ç—Ä–æ–π (–∏—Å–ø—Ä–∞–≤–µ–Ω)", callback_data=f"maint_action_available_{equipment_id}")
    builder.button(text="üõ† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¢–û/–≤ —Ä–µ–º–æ–Ω—Ç", callback_data=f"maint_action_maintenance_{equipment_id}") # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –¢–û/–†–µ–º–æ–Ω—Ç–∞
    builder.button(text="üóë –°–ø–∏—Å–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ", callback_data=f"maint_action_decommission_{equipment_id}")
    builder.adjust(1)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è", callback_data=f"maint_back_to_list")) # –í–µ—Ä–Ω—É—Ç—å—Å—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë", callback_data="maint_cancel_fsm")) # –ü–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞
    return builder.as_markup()

def get_maintenance_confirmation_keyboard(equipment_id: int, action_to_confirm: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data=f"maint_confirm_{action_to_confirm}_{equipment_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"maint_cancel_action_{equipment_id}") # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
    builder.adjust(1)
    return builder.as_markup()