from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timedelta
from models import async_session, Vehicle, TripSheet, Employee
# –£–±–∏—Ä–∞–µ–º get_vehicles_keyboard –∏–∑ –∏–º–ø–æ—Ä—Ç–∞:
from app.keyboards import confirm_cancel_keyboard
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
import math # –û—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

TRIPS_PER_PAGE = 5 # –û—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

class CheckStatusStates(StatesGroup):
    CHOOSING_VEHICLE = State()

class TripSheetStates(StatesGroup):
    CHOOSING_VEHICLE = State()
    ENTERING_DESTINATION = State()
    ENTERING_MILEAGE = State()
    ENTERING_FUEL = State()
    CONFIRMATION = State()
    FINISHING_TRIP = State()
# –£–±—Ä–∞–ª–∏ ShiftStates/ShiftManagementStates

# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫ (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞) ---
async def _generate_trip_history_page(session: AsyncSession, user_id: int, page: int = 1):
    offset = (page - 1) * TRIPS_PER_PAGE
    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫
    total_trips_result = await session.execute(
        select(func.count(TripSheet.id))
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º driver_id
        .where(TripSheet.driver_id == user_id)
    )
    total_trips = total_trips_result.scalar_one_or_none() or 0

    if total_trips == 0:
        return "üöó –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫", None

    total_pages = math.ceil(total_trips / TRIPS_PER_PAGE)
    page = max(1, min(page, total_pages))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    trips_result = await session.execute(
        select(TripSheet)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º driver_id
        .where(TripSheet.driver_id == user_id)
        .order_by(TripSheet.date.desc())
        .limit(TRIPS_PER_PAGE)
        .offset(offset)
    )
    trips_on_page = trips_result.scalars().all()

    response_text = [f"üìÖ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):"]
    for trip in trips_on_page:
        # –°–≤—è–∑—å vehicle –æ—Å—Ç–∞–ª–∞—Å—å –≤ TripSheet
        vehicle = await session.get(Vehicle, trip.vehicle_id)
        vehicle_info = f"{vehicle.number_plate} ({vehicle.model})" if vehicle else f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {trip.vehicle_id})"
        response_text.append(
            f"\nüóì {trip.date.strftime('%d.%m.%Y %H:%M')} | üöó {vehicle_info}\n"
            f"üìç –ö—É–¥–∞: {trip.destination}\n"
            f"üõ£ –ü—Ä–æ–±–µ–≥: {trip.mileage} –∫–º | ‚õΩ –†–∞—Å—Ö–æ–¥: {trip.fuel_consumption} –ª"
        )

    builder = InlineKeyboardBuilder()
    if page > 1:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"trip_page_{page-1}")
    if page < total_pages:
        builder.button(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"trip_page_{page+1}")
    builder.adjust(2)

    return "\n".join(response_text), builder.as_markup() if total_pages > 1 else None

async def show_trip_history(message: types.Message):
    """–ü–æ–∫–∞–∑ –ü–ï–†–í–û–ô —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫"""
    async with async_session() as session:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.from_user.id –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ driver_id —ç—Ç–æ telegram_id
        text, reply_markup = await _generate_trip_history_page(session, message.from_user.id, page=1)
        # –ò–õ–ò –µ—Å–ª–∏ driver_id —ç—Ç–æ Employee.id, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å Employee
        # employee = await session.execute(select(Employee).where(Employee.telegram_id == message.from_user.id))
        # employee = employee.scalar_one_or_none()
        # if employee:
        #    text, reply_markup = await _generate_trip_history_page(session, employee.id, page=1)
        # else: text, reply_markup = "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.", None
        await message.answer(text, reply_markup=reply_markup)

async def handle_trip_pagination(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫."""
    try:
        page = int(callback.data.split("_")[-1])
        async with async_session() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback.from_user.id –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º Employee.id
            text, reply_markup = await _generate_trip_history_page(session, callback.from_user.id, page=page)
            # if employee: text, reply_markup = await _generate_trip_history_page(session, employee.id, page=page) ...
            await callback.message.edit_text(text, reply_markup=reply_markup)
        await callback.answer()
    except (ValueError, IndexError, Exception) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}, data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
# --- –ö–æ–Ω–µ—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---

async def handle_new_trip_sheet(message: types.Message, state: FSMContext):
    logging.info(f"handle_new_trip_sheet –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    try:
        async with async_session() as session:
            # –ó–∞–ø—Ä–æ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            result = await session.execute(
                select(Vehicle).where(Vehicle.status == "available")
            )
            vehicles = result.scalars().all()

            if not vehicles:
                await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –º–∞—à–∏–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)
                all_vehicles_result = await session.execute(select(Vehicle))
                all_vehicles = all_vehicles_result.scalars().all()
                logging.warning(f"–°—Ç–∞—Ç—É—Å—ã –í–°–ï–• –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ë–î: {[(v.number_plate, v.status) for v in all_vehicles]}")
                return

            builder = InlineKeyboardBuilder()
            for vehicle in vehicles:
                builder.button(
                    text=f"{vehicle.model} ({vehicle.number_plate})",
                    callback_data=f"vehicle_{vehicle.id}"
                )
            builder.adjust(1)

            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", reply_markup=builder.as_markup())
            await state.set_state(TripSheetStates.CHOOSING_VEHICLE)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ handle_new_trip_sheet: {e}")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {str(e)}")
        await state.clear()

async def process_vehicle_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        vehicle_id = int(callback.data.split('_')[1])
        await state.update_data(vehicle_id=vehicle_id)
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤—Ç–æ –¥–ª—è –ª–æ–≥–∞
        async with async_session() as session:
            vehicle = await session.get(Vehicle, vehicle_id)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∞–≤—Ç–æ {vehicle.number_plate if vehicle else '–ù–ï –ù–ê–ô–î–ï–ù–û'}")
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:") # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏
        await state.set_state(TripSheetStates.ENTERING_DESTINATION)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ process_vehicle_selection: {e}")
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}") # –û—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç, —Ç.–∫. edit_text –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
        await state.clear()
    await callback.answer()

async def process_destination(message: types.Message, state: FSMContext):
    destination = message.text.strip()
    if not destination:
        await message.answer("–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(destination=destination)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ (–∫–º):")
    await state.set_state(TripSheetStates.ENTERING_MILEAGE)

async def process_mileage(message: types.Message, state: FSMContext):
    try:
        mileage = float(message.text.replace(',', '.')) # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
        if mileage <= 0:
            await message.answer("–ü—Ä–æ–±–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(mileage=mileage)
        data = await state.get_data()
        async with async_session() as session:
            vehicle = await session.get(Vehicle, data['vehicle_id'])
            if not vehicle:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞.")
            recommended_fuel = round(mileage * vehicle.fuel_rate / 100, 1) if vehicle.fuel_rate else 0

        await message.answer(
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞—Å—Ö–æ–¥: {recommended_fuel} –ª\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª):"
        )
        await state.set_state(TripSheetStates.ENTERING_FUEL)
    except ValueError as ve:
        logging.warning(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–±–µ–≥–∞ user {message.from_user.id}: {message.text} ({ve})")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 120.5):")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ process_mileage: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–±–µ–≥–∞.")
        await state.clear()


async def process_fuel(message: types.Message, state: FSMContext):
    try:
        fuel = float(message.text.replace(',', '.'))
        if fuel < 0:
            await message.answer("–†–∞—Å—Ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(fuel_consumption=fuel)
        data = await state.get_data()
        async with async_session() as session:
            vehicle = await session.get(Vehicle, data['vehicle_id'])
            if not vehicle:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

        text = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {vehicle.number_plate} ({vehicle.model})\n"
            f"–ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {data['destination']}\n"
            f"–ü—Ä–æ–±–µ–≥: {data['mileage']} –∫–º\n"
            f"–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {data['fuel_consumption']} –ª"
        )

        await message.answer(
            text,
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
            reply_markup=confirm_cancel_keyboard(show_finish_button=False)
        )
        await state.set_state(TripSheetStates.CONFIRMATION)
    except ValueError as ve:
        logging.warning(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ user {message.from_user.id}: {message.text} ({ve})")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.3):")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ process_fuel: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Ö–æ–¥–∞.")
        await state.clear()


async def save_trip_sheet(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞"""
    user_id = callback.from_user.id # telegram_id
    if callback.data == "confirm":
        data = await state.get_data()

        try:
            async with async_session() as session:
                trip = TripSheet(
                    driver_id=user_id, # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ telegram_id
                    vehicle_id=data['vehicle_id'],
                    destination=data['destination'],
                    mileage=data['mileage'],
                    fuel_consumption=data['fuel_consumption'],
                    status="completed" 
                )
                session.add(trip)

                vehicle = await session.get(Vehicle, data['vehicle_id'])
                if vehicle:
                    vehicle.status = "in_use"
                    session.add(vehicle)
                else:
                    logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å {data['vehicle_id']} –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞!")

                await session.commit()
                logging.info(f"–ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è user {user_id}, –∞–≤—Ç–æ {data['vehicle_id']}")

            await callback.message.edit_text(
                "‚úÖ –ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –ü–û–ï–ó–î–ö–£
                reply_markup=confirm_cancel_keyboard(show_finish_button=True)
            )
            await state.set_state(TripSheetStates.FINISHING_TRIP)

        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞: {e}")
            await callback.message.edit_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
            await state.clear()


    elif callback.data == "cancel":
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
        await state.clear()

    await callback.answer()


async def finish_trip(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ (–Ω–µ —Å–º–µ–Ω—ã)"""
    # –ö–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π
    data = await state.get_data()
    vehicle_id = data.get('vehicle_id')

    if not vehicle_id:
        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω vehicle_id –≤ state –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏ –¥–ª—è user {callback.from_user.id}")
        await callback.message.edit_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (–Ω–µ—Ç ID –∞–≤—Ç–æ).")
        await state.clear()
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–µ–∑–¥–∫—É –¥–ª—è –∞–≤—Ç–æ ID: {vehicle_id}")
    try:
        async with async_session() as session:
            vehicle = await session.get(Vehicle, vehicle_id)
            if vehicle:
                vehicle.status = "available"
                session.add(vehicle)
                await session.commit()
                logging.info(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è {vehicle_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'available'.")
            else:
                logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å {vehicle_id} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏.")

        await callback.message.edit_text("‚úÖ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=None)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ finish_trip: {e}")
        await callback.message.edit_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏.")

    await state.clear()
    await callback.answer()


async def show_fuel_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞"""
    user_id = message.from_user.id # telegram_id
    # –ï—Å–ª–∏ driver_id —ç—Ç–æ Employee.id, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å employee_db_id
    try:
        async with async_session() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–ª–∏ employee_db_id
            avg_fuel_result = await session.execute(
                select(func.avg(TripSheet.fuel_consumption / TripSheet.mileage * 100)) # –†–∞—Å—Ö–æ–¥ –ª/100–∫–º
                .where(TripSheet.driver_id == user_id)
                .where(TripSheet.mileage > 0) # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            )
            avg_fuel = round(avg_fuel_result.scalar() or 0, 1)

            total_mileage_result = await session.execute(
                select(func.sum(TripSheet.mileage))
                .where(TripSheet.driver_id == user_id)
            )
            total_mileage = round(total_mileage_result.scalar() or 0, 1)

            total_trips = await get_trip_count(user_id) # –ü–µ—Ä–µ–¥–∞–µ–º ID

            await message.answer(
                "‚õΩ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ì–°–ú:\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: {avg_fuel} –ª/100 –∫–º\n"
                f"‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–±–µ–≥: {total_mileage} –∫–º\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {total_trips}"
            )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ show_fuel_stats: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ì–°–ú.")


async def get_trip_count(driver_identifier: int) -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É (telegram_id –∏–ª–∏ Employee.id)."""
    try:
        async with async_session() as session:
            result = await session.execute(
                select(func.count(TripSheet.id))
                .where(TripSheet.driver_id == driver_identifier)
            )
            return result.scalar_one_or_none() or 0
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ get_trip_count –¥–ª—è {driver_identifier}: {e}")
        return 0


async def check_vehicle_status(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ—Ö. —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
    await state.clear() # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = await session.execute(select(Vehicle))
            vehicles = result.scalars().all()

            if not vehicles:
                await message.answer("üö´ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            builder = InlineKeyboardBuilder()
            for vehicle in vehicles:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä—è–º–æ –≤ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                status_icon = {
                    'available': '‚úÖ', 'in_use': 'üÖøÔ∏è',
                    'maintenance': 'üõ†Ô∏è', 'repair': '‚ö†Ô∏è'
                }.get(vehicle.status, '‚ùì')
                builder.button(
                    # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: –ò–∫–æ–Ω–∫–∞ –ú–æ–¥–µ–ª—å (–ù–æ–º–µ—Ä)
                    text=f"{status_icon} {vehicle.model} ({vehicle.number_plate})",
                    # Callback data —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    callback_data=f"check_status_{vehicle.id}"
                )
            # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            builder.adjust(1)

            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:",
                reply_markup=builder.as_markup()
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            await state.set_state(CheckStatusStates.CHOOSING_VEHICLE)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ check_vehicle_status –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
        await state.clear()

async def process_vehicle_status_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ callback_data
        vehicle_id = int(callback.data.split('_')[-1])
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∞–≤—Ç–æ ID {vehicle_id} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")

        async with async_session() as session:
            vehicle = await session.get(Vehicle, vehicle_id)

            if not vehicle:
                await callback.message.edit_text("üö´ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                await state.clear()
                await callback.answer()
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ check_vehicle_status)
            status_msg = {
                'available': '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω',
                'in_use': 'üÖøÔ∏è –í —Ä–µ–π—Å–µ',
                'maintenance': 'üõ† –ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏',
                'repair': '‚ö†Ô∏è –í —Ä–µ–º–æ–Ω—Ç–µ'
            }.get(vehicle.status, f'‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({vehicle.status})')

            status_text = (
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n"
                f"–ê–≤—Ç–æ: {vehicle.model} ({vehicle.number_plate})\n"
                f"–°—Ç–∞—Ç—É—Å: {status_msg}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å–º–æ—Ç—Ä: {vehicle.last_check.strftime('%d.%m.%Y') if vehicle.last_check else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
            )

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å—Ç–∞—Ç—É—Å –∏ —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
            await callback.message.edit_text(status_text, reply_markup=None)
            await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è vehicle_id –∏–∑ callback_data '{callback.data}': {e}")
        await callback.message.edit_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞.")
        await state.clear()
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ process_vehicle_status_selection: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
        await state.clear()

    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

def register_driver_handlers(router: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    logging.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è")
    router.message.register(handle_new_trip_sheet, F.text == "–ù–æ–≤—ã–π –ø—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç")
    router.message.register(show_trip_history, F.text == "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫")
    router.message.register(show_fuel_stats, F.text == "‚õΩ –£—á–µ—Ç –ì–°–ú")
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –∞–≤—Ç–æ
    router.message.register(check_vehicle_status, F.text == "üõ† –¢–µ—Ö. —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    router.callback_query.register(handle_trip_pagination, F.data.startswith("trip_page_"))

    # FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–µ–≤–æ–≥–æ –ª–∏—Å—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    router.callback_query.register(process_vehicle_selection, F.data.startswith("vehicle_"), TripSheetStates.CHOOSING_VEHICLE)
    router.message.register(process_destination, TripSheetStates.ENTERING_DESTINATION)
    router.message.register(process_mileage, TripSheetStates.ENTERING_MILEAGE)
    router.message.register(process_fuel, TripSheetStates.ENTERING_FUEL)
    router.callback_query.register(save_trip_sheet, F.data.in_(['confirm', 'cancel']), TripSheetStates.CONFIRMATION)
    router.callback_query.register(finish_trip, F.data == "finish_trip", TripSheetStates.FINISHING_TRIP)

    # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞
    router.callback_query.register(
        process_vehicle_status_selection,
        CheckStatusStates.CHOOSING_VEHICLE, # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        F.data.startswith("check_status_") # –§–∏–ª—å—Ç—Ä –ø–æ callback_data
    )

    # –£–±—Ä–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã
